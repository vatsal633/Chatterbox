import { useParams, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { Menu, Stethoscope } from "lucide-react";
import dotenv from 'dotenv'
import { GoogleGenerativeAI } from '@google/generative-ai'
import axios from "axios";


const LanguagePage = () => {


    const { language } = useParams();
    const navigate = useNavigate();
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [topic, setTopic] = useState('');
    const [questions, setQuestion] = useState([]);
    const [generate, setGenerate] = useState(false)

    //store all the question's name description input and output of generated by ai
    const [everyquestion, seteveryquestion] = useState([])
    const [everydesc, setEverydesc] = useState([])
    const [everyinput, setEveryinput] = useState([])
    const [everyoutput, setEveroutput] = useState([])

    const { username } = useParams()


    const supportedLanguages = ["c", "cpp", "python", "javascript"];
    const topics = {
        c: ["DMA", "Controll statement", "Arrays & String", "Loops", "Functions", "Pointers", "Structures"],
        cpp: ["OOP", "STL", "Inheritance", "Polymorphism", "Templates"],
        python: ["Lists", "Dictionaries", "Functions", "OOP", "Decorators"],
        javascript: ["DOM", "ES6", "Async/Await", "Closures", "Prototypes"],
    };

    //ai generation logic

    //handle wrong language
    useEffect(() => {
        if (!supportedLanguages.includes(language)) {
            navigate("/404", { replace: true });
        }
    }, [language, navigate]);
    const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);

    //updating recent activites database
    useEffect(() => {

        const updateAct = async () => {

            try {
                let response = await axios.post(`http://localhost:3000/recent/update-recentact`, { username, language, topic })

                console.log(response.data)

            } catch (err) {
                console.log("server error", err)
            }
        }

        if (topic) {  // Only run when a valid topic exists
            updateAct();
        }
    },[username,language,topic])

    //storing question in local storage
    useEffect(()=>{
        console.log(questions)


    },[questions])

    //ai generated questions login here
    // dotenv.config()
    const apikey = import.meta.env.VITE_GEMINI_API_KEY//import the api key
    const GenAI = new GoogleGenerativeAI(apikey)



    //read the topic from side bar when user click on it to to send the AI which topic question to display
    const read = (topic) => {
        setTopic(topic)
        console.log(topic)
    }




    const generateQuestion = async () => {
        try {
            setGenerate(true)

            console.log("Generating question for topic:", topic);

            let prompt = `Generate five practice questions for "${topic} in ${language}" in JSON format. Each question should have these fields:
        {
            "question": "The actual question text.",
            "description": "A brief explanation of the concept behind the question.",
            "input": "Example input values.",
            "output": "Expected output."
        }
        Return only a JSON array without any extra text or formatting and dont repeat questions you are reapeat the question i say dont reapeat .`;//making frame of the question
            const model = GenAI.getGenerativeModel({ model: "gemini-1.5-flash" })//init model
            const response = await model.generateContent(prompt)//pasing the question



            const text = response.response.candidates[0].content.parts[0].text || "No response received."


            let newtext = text.replace(/```json|```/g, "").trim();
            const parsedQuestions = JSON.parse(newtext);
            console.log(newtext)





            //storing  the josn question in state
            setQuestion(parsedQuestions)//storing the json file generate by ai
            setGenerate(false)





        } catch (err) {
            console.log(`error while generating question:${err}`)
        }
    }

    //append all the question's name description input output from specific states
    useEffect(() => {
        if (questions.length > 0) {
            seteveryquestion(questions.map(q => q.question));
            setEverydesc(questions.map(q => q.description))
            setEveryinput(questions.map(q => q.input))
            setEveroutput(questions.map(q => q.output))
        }
    }, [questions]);



    //sending the information in code editor
    const solvequestion = (topic, number) => {


        let des = '';
        let input = ''
        let output = ''
        let question = ""
        try {
            //extrancting the specific question's details
            console.log(`sovle question for ${topic}`)
            for (let i = 0; i < questions.length; i++) {
                if (i == number) {
                    des = questions[i].description
                    input = questions[i].input
                    output = questions[i].output
                    question = questions[i].question
                }
            }
        } catch (err) {
            console.log(err)
        }
        navigate(`/${username}/practice/${language}/${topic}`, { state: { description: des, input: input, output: output, question: question } })
        // console.log(`${des} output:${output} input:${input}`)
    }

    //this function updates solvequestions in database when user click on solve buton
    const updateAttemptedQuestion = async () => {
        try {
            let Response = await axios.post(`http://localhost:3000/states/${username}/update-attempt`)


        } catch (err) {
            console.log("error while connecting ", err);
        }
    }


    return (
        <div className="flex flex-col md:flex-row min-h-screen bg-gray-900 text-white">
            {/* Sidebar Toggle Button (Mobile) */}
            <button
                className="md:hidden p-4 text-cyan-400 focus:outline-none flex justify-end"
                onClick={() => setSidebarOpen(!sidebarOpen)}
            >
                <Menu size={28} />
            </button>

            {/* Sidebar */}
            <aside
                className={`fixed md:static top-0 left-0 w-64 bg-gray-800 p-6 space-y-4 transform ${sidebarOpen ? "translate-x-0" : "-translate-x-full"
                    } md:translate-x-0 transition-transform duration-300 ease-in-out md:block max-[768px]:w-full z-10`}
            >
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-bold text-cyan-400 inline">Topics</h2>
                    <button
                        className="md:hidden p-4 text-cyan-400 focus:outline-none flex justify-end"
                        onClick={() => setSidebarOpen(!sidebarOpen)}
                    >
                        <Menu size={28} />
                    </button>
                </div>

                {/* displaying topic of  */}
                <ul className="space-y-2">
                    {topics[language]?.map((topic, index) => (
                        <li
                            key={index}
                            className="p-2 bg-gray-700 rounded-lg hover:bg-cyan-600 transition-all duration-200 cursor-pointer"
                            onClick={() => { read(topic) }}
                        >
                            {topic}
                        </li>
                    ))}
                </ul>
            </aside>



            {/* Main Content */}
            <div className="bg-[#0b0f17] w-full flex flex-col">



                {/* Main Section Header */}
                <div className="bg-[#111317] p-5 border-b border-gray-700">
                    <h2 className="text-2xl">{capitalize(language)}</h2>
                </div>

                {/* Question Section */}
                <div className=" flex justify-center mt-4">
                    <button
                        className=" px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-all"
                        onClick={generateQuestion}
                    >
                        Generate AI Question
                    </button>


                </div>
                <div className="flex flex-col items-center min-h-screen p-6">

                    {/* loading screeen */}
                    <div class={` ${generate ? "flex" : "hidden"} items-center justify-center my-3 rounded-lg bg-[#0b0f17] dark:bg-gray-800 dark:border-gray-700`}>
                        <div role="status">
                            <svg aria-hidden="true" class="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" /><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" /></svg>
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>


                    {everyquestion.map((value, index) => (
                        <div
                            key={index}
                            className="bg-[#111317] w-full max-w-2xl flex justify-between items-center p-6 rounded-md border border-gray-700 mb-4 shadow-md flex-col"
                        >
                            <div>

                                <h3 className="text-lg font-semibold">Question {index + 1}</h3>
                            </div>
                            <div className="flex justify-between">

                                <p className="text-gray-300">{value}</p> {/* Display the actual question */}
                                <button className="px-4 py-2 bg-cyan-500 hover:bg-cyan-600 text-white rounded-lg transition-all" onClick={
                                    () => {
                                        solvequestion(value, index);
                                        updateAttemptedQuestion();
                                    }
                                }>
                                    Solve Question
                                </button>
                            </div>
                        </div>
                    ))}



                </div>
            </div>
        </div>
    );
};

export default LanguagePage;
