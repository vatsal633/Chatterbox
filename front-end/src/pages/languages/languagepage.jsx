import { useParams, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { Menu, Stethoscope } from "lucide-react";
import dotenv from 'dotenv'
import { GoogleGenerativeAI } from '@google/generative-ai'
import axios from "axios";


const LanguagePage = () => {

    const BASE_URL = import.meta.env.VITE_BACKEND_URL;
    const { language } = useParams();
    const navigate = useNavigate();
    const [sidebarOpen, setSidebarOpen] = useState(false);
    const [topic, setTopic] = useState('');
    const [questions, setQuestion] = useState([]);
    const [generate, setGenerate] = useState(false)

    //store all the question's name description input and output of generated by ai
    const [everyquestion, seteveryquestion] = useState([])
    const [everydesc, setEverydesc] = useState([])
    const [everyinput, setEveryinput] = useState([])
    const [everyoutput, setEveroutput] = useState([])

    const { username } = useParams()


    const supportedLanguages = ["c", "cpp", "python", "javascript"];
    const topics = {
        c: ["DMA", "Controll statement", "Arrays & String", "Loops", "Functions", "Pointers", "Structures"],
        cpp: ["OOP", "STL", "Inheritance", "Polymorphism", "Templates"],
        python: ["Lists", "Dictionaries", "Functions", "OOP", "Decorators"],
        javascript: ["DOM", "ES6", "Async/Await", "Closures", "Prototypes"],
    };

    //ai generation logic

    //handle wrong language
    useEffect(() => {
        if (!supportedLanguages.includes(language)) {
            navigate("/404", { replace: true });
        }
    }, [language, navigate]);
    const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);

    //updating recent activites database
    useEffect(() => {

        const updateAct = async () => {

            try {
                let response = await axios.post(`${BASE_URL}/recent/update-recentact`, { username, language, topic })

                console.log(response.data)

            } catch (err) {
                console.log("server error", err)
            }
        }

        if (topic) {  // Only run when a valid topic exists
            updateAct();
        }
    }, [username, language, topic])

    //storing question in local storage

    useEffect(() => {
        if (setQuestion != null && everyquestion != null) {
            localStorage.setItem('question', JSON.stringify(everyquestion))
        }
    }, [setQuestion])

    //ai generated questions login here
    // dotenv.config()
    const apikey = import.meta.env.VITE_GEMINI_API_KEY//import the api key
    const GenAI = new GoogleGenerativeAI(apikey)



    //read the topic from side bar when user click on it to to send the AI which topic question to display
    const read = (topic) => {
        setTopic(topic)
        console.log(topic)
    }




    const generateQuestion = async () => {
        try {
            setGenerate(true)

            console.log("Generating question for topic:", topic);

            let prompt = `Generate five practice questions for "${topic} in ${language}" in JSON format. Each question should have these fields:
        {
            "question": "The actual question text.",
            "description": "A brief explanation of the concept behind the question.",
            "input": "Example input values.",
            "output": "Expected output."
        }
        Return only a JSON array without any extra text or formatting and dont repeat questions you are reapeat the question i say dont reapeat .`;//making frame of the question
            const model = GenAI.getGenerativeModel({ model: "gemini-1.5-flash" })//init model
            const response = await model.generateContent(prompt)//pasing the question



            const text = response.response.candidates[0].content.parts[0].text || "No response received."


            let newtext = text.replace(/```json|```/g, "").trim();
            const parsedQuestions = JSON.parse(newtext);
            console.log(newtext)





            //storing  the josn question in state
            setQuestion(parsedQuestions)//storing the json file generate by ai
            setGenerate(false)
        } catch (err) {
            console.log(`error while generating question:${err}`)
        }
    }

    //append all the question's name description input output from specific states
    useEffect(() => {
        if (questions.length > 0) {
            seteveryquestion(questions.map(q => q.question));
            setEverydesc(questions.map(q => q.description))
            setEveryinput(questions.map(q => q.input))
            setEveroutput(questions.map(q => q.output))
        }
    }, [questions]);



    //sending the information in code editor
    const solvequestion = (topic, number) => {


        let des = '';
        let input = ''
        let output = ''
        let question = ""
        try {
            //extrancting the specific question's details
            console.log(`sovle question for ${topic}`)
            for (let i = 0; i < questions.length; i++) {
                if (i == number) {
                    des = questions[i].description
                    input = questions[i].input
                    output = questions[i].output
                    question = questions[i].question
                }
            }
        } catch (err) {
            console.log(err)
        }
        navigate(`/${username}/practice/${language}/${topic}`, { state: { description: des, input: input, output: output, question: question } })
        // console.log(`${des} output:${output} input:${input}`)
    }

    //this function updates solvequestions in database when user click on solve buton
    const updateAttemptedQuestion = async () => {
        try {
            let Response = await axios.post(`${BASE_URL}/states/${username}/update-attempt`)


        } catch (err) {
            console.log("error while connecting ", err);
        }
    }


    return (
        <div className="flex flex-col md:flex-row min-h-screen bg-[#12141A] text-white">
            <button
                className="md:hidden p-4 text-cyan-400 focus:outline-none flex justify-end"
                onClick={() => setSidebarOpen(!sidebarOpen)}
            >
                <Menu size={28} />
            </button>

            <aside
                className={`fixed md:static top-0 left-0 w-64 bg-[#1A1D23] p-6 space-y-4 transform ${sidebarOpen ? "translate-x-0" : "-translate-x-full"
                    } md:translate-x-0 transition-transform duration-300 ease-in-out md:block max-[768px]:w-full z-10`}
            >
                <div className="flex items-center justify-between">
                    <h2 className="text-xl font-bold text-cyan-400 inline">Select Topics</h2>
                    <button
                        className="md:hidden p-4 text-cyan-400 focus:outline-none flex justify-end"
                        onClick={() => setSidebarOpen(!sidebarOpen)}
                    >
                        <Menu size={28} />
                    </button>
                </div>

                <ul className="space-y-2">
                    {topics[language]?.map((topic, index) => (
                        <li
                            key={index}
                            className="p-2 bg-gray-700 rounded-lg hover:bg-cyan-600 transition-all duration-200 cursor-pointer"
                            onClick={() => { read(topic) }}
                        >
                            {topic}
                        </li>
                    ))}
                </ul>
            </aside>

            <div className="bg-[#12141A] w-full flex flex-col">
                <div className="bg-[#1A1D23] p-5 border-b border-gray-700">
                    <h2 className="text-2xl">{capitalize(language)} {topic && `- ${topic}`}</h2>
                </div>

                <div className="flex justify-center mt-4">
                    <button
                        className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-all"
                        onClick={generateQuestion}
                    >
                        {generate ? "Generating..." : `Generate Question ${topic}`}
                    </button>
                </div>

                <div className="flex flex-col items-center min-h-screen p-6">
                    {generate && (
                        <div className="flex justify-center items-center my-4">
                            <div className="w-8 h-8 border-4 border-t-transparent border-white rounded-full animate-spin"></div>
                        </div>
                    )}

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {questions.map((q, index) => (
                            <div key={index} className="bg-gray-800 p-5 rounded-md border border-gray-700">
                                <h3 className="text-lg font-semibold mb-2">Question {index + 1}</h3>
                                <p className="text-gray-300">{q.question}</p>
                                <button
                                    className="mt-3 px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-all"
                                    onClick={() => navigate(`/${username}/practice/${language}/${topic}`, { state: q })}
                                >
                                    Solve Question
                                </button>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default LanguagePage;
